Index: gba/GBA.cpp
===================================================================
--- gba/GBA.cpp	(revision 1195)
+++ gba/GBA.cpp	(working copy)
@@ -21,6 +21,7 @@
 #include "../System.h"
 #include "agbprint.h"
 #include "GBALink.h"
+#include "../win32/icuGBA.h"
 
 #ifdef PROFILING
 #include "prof/prof.h"
@@ -1268,6 +1269,16 @@
 
 void CPUCleanUp()
 {
+  // Notify icuGBA first (otherwise access violation errors)
+  icuGBA_RegisterMemoryRegion(MR_BIOS, NULL, 0);
+  icuGBA_RegisterMemoryRegion(MR_IRAM, NULL, 0);
+  icuGBA_RegisterMemoryRegion(MR_PAL, NULL, 0);
+  icuGBA_RegisterMemoryRegion(MR_VRAM, NULL, 0);
+  icuGBA_RegisterMemoryRegion(MR_OAM, NULL, 0);
+  icuGBA_RegisterMemoryRegion(MR_IO, NULL, 0);
+  icuGBA_RegisterMemoryRegion(MR_WRAM, NULL, 0);
+  icuGBA_RegisterMemoryRegion(MR_ROM, NULL, 0);
+
 #ifdef PROFILING
   if(profilingTicksReload) {
     profCleanup();
@@ -1451,6 +1462,16 @@
 
   CPUUpdateRenderBuffers(true);
 
+  icuGBA_RegisterMemoryRegion(MR_BIOS, bios, 0x4000);
+  icuGBA_RegisterMemoryRegion(MR_IRAM, internalRAM, 0x8000);
+  icuGBA_RegisterMemoryRegion(MR_PAL, paletteRAM, 0x400);
+  icuGBA_RegisterMemoryRegion(MR_VRAM, vram, 0x20000);
+  icuGBA_RegisterMemoryRegion(MR_OAM, oam, 0x400);
+  icuGBA_RegisterMemoryRegion(MR_IO, ioMem, 0x400);
+  icuGBA_RegisterMemoryRegion(MR_WRAM, workRAM, 0x40000);
+  icuGBA_RegisterMemoryRegion(MR_ROM, rom, romSize);
+  // TODO: Register pix?
+
   return romSize;
 }
 
@@ -3446,6 +3467,7 @@
 
 
   for(;;) {
+	  icuGBA_MemoryAccess(MA_EXECUTE, armNextPC, 4);
 #ifndef FINAL_VERSION
     if(systemDebug) {
       if(systemDebug >= 10 && !holdState) {
Index: gba/GBAinline.h
===================================================================
--- gba/GBAinline.h	(revision 1195)
+++ gba/GBAinline.h	(working copy)
@@ -8,6 +8,7 @@
 #include "agbprint.h"
 #include "GBAcpu.h"
 #include "GBALink.h"
+#include "../win32/icuGBA.h"
 
 extern const u32 objTilesAddress[3];
 
@@ -45,6 +46,7 @@
 
 static inline u32 CPUReadMemory(u32 address)
 {
+  icuGBA_MemoryAccess(MA_READ, address, 4);
   u32 value;
   u32 oldAddress = address;
 
@@ -175,6 +177,7 @@
 
 static inline u32 CPUReadHalfWord(u32 address)
 {
+  icuGBA_MemoryAccess(MA_READ, address, 2);
   u32 value;
   u32 oldAddress = address;
 
@@ -292,6 +295,7 @@
 
 static inline s16 CPUReadHalfWordSigned(u32 address)
 {
+  icuGBA_MemoryAccess(MA_READ, address, 2);
   u32 oldAddress = address;
   if(address & 1) {
     address &= ~0x01;
@@ -312,6 +316,7 @@
 
 static inline u8 CPUReadByte(u32 address)
 {
+  icuGBA_MemoryAccess(MA_READ, address, 1);
   switch(address >> 24) {
   case 0:
     if (reg[15].I >> 24) {
@@ -390,7 +395,7 @@
 
 static inline void CPUWriteMemory(u32 address, u32 value)
 {
-
+  icuGBA_MemoryAccess(MA_WRITE, address, 4);
 #ifdef GBA_LOGGING
   if(address & 3) {
     if(systemVerbose & VERBOSE_UNALIGNED_MEMORY) {
@@ -490,6 +495,7 @@
 
 static inline void CPUWriteHalfWord(u32 address, u16 value)
 {
+  icuGBA_MemoryAccess(MA_WRITE, address, 2);
 #ifdef GBA_LOGGING
   if(address & 1) {
     if(systemVerbose & VERBOSE_UNALIGNED_MEMORY) {
@@ -594,6 +600,7 @@
 
 static inline void CPUWriteByte(u32 address, u8 b)
 {
+  icuGBA_MemoryAccess(MA_WRITE, address, 1);
   switch(address >> 24) {
   case 2:
 #ifdef BKPT_SUPPORT
@@ -728,7 +735,7 @@
     }
 #endif
     break;
-  }
+  }  
 }
 
 #endif // GBAINLINE_H
Index: win32/VBA.cpp
===================================================================
--- win32/VBA.cpp	(revision 1195)
+++ win32/VBA.cpp	(working copy)
@@ -10,6 +10,7 @@
 
 #include "stdafx.h"
 #include "VBA.h"
+#include "icuGBA.h"
 
 #include <intrin.h>
 
@@ -194,6 +195,9 @@
 
 VBA::VBA()
 {
+  icuGBA_InitDLL();
+  icuGBA_Initialise();
+
   // COINIT_MULTITHREADED is not supported by SHBrowseForFolder with BIF_USENEWUI
   // OpenAL also causes trouble when COINIT_MULTITHREADED is used
   if( S_OK != CoInitializeEx( NULL, COINIT_APARTMENTTHREADED ) ) {
@@ -342,6 +346,7 @@
 
 VBA::~VBA()
 {
+  icuGBA_Terminate();
   rpiCleanup();
   InterframeCleanup();
 
